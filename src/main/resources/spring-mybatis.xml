<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:task="http://www.springframework.org/schema/task"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                          http://www.springframework.org/schema/tx
                          http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
                          http://www.springframework.org/schema/aop
                          http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/task
                          http://www.springframework.org/schema/task/spring-task.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <!-- 自动扫描，扫描带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean -->        
    <!--自动注入 会到指定的包下面去找 -->
    <context:component-scan base-package="com" />
    
   <!-- 引入配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- 引入多个配置文件 -->
		<property name="locations">
			<list>
				<!-- 引入数据库连接池配置文件 -->
				<value>classpath:jdbc.properties</value>
				<!-- 引入redis连接池配置文件 -->
				<value>classpath:redis.properties</value>
			</list>
		</property>
	</bean>

<!-- redis配置文件 -->
	<!-- redis数据源 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大空闲数 -->
		<property name="maxIdle" value="${redis.maxIdle}" />
		<!-- 最大空连接数 -->
		<property name="maxTotal" value="${redis.maxTotal}" />
		<!-- 最大等待时间 -->
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
		<!-- 连接超时时是否阻塞，false时报异常,ture阻塞直到超时, 默认true -->
		<property name="blockWhenExhausted" value="${redis.blockWhenExhausted}" />
		<!-- 返回连接时，检测连接是否成功 -->
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>

	<!-- Spring-redis连接池管理工厂 -->
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<!-- IP地址 -->
		<property name="hostName" value="${redis.host}" />
		<!-- 密码 -->
		<property name="password" value="${redis.password}" />
		<!-- 端口号 -->
		<property name="port" value="${redis.port}" />
		<!-- 超时时间 默认2000 -->
		<property name="timeout" value="${redis.timeout}" />
		<!-- 连接池配置引用 -->
		<property name="poolConfig" ref="poolConfig" />
		<!-- usePool：是否使用连接池 -->
		<property name="usePool" value="true" />
	</bean>

	<!-- redis模板定义 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<property name="keySerializer">
			<bean 	class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<!--开启事务 -->
		<property name="enableTransactionSupport" value="true"></property>
	</bean>

	<!-- 自定义redis工具类RedisUtil -->
	<bean id="RedisUtil" class="com.hyxy.util.RedisUtil">
		<!-- 引入redis模板定义 -->
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>
	
	<!--使用RedisUtil工具类方法如下：
	 在需要用到缓存的类里面用注解的方式注入缓存工具类
	@Autowired 或 @Resource
	private RedisUtil redisUtil -->
    
  
    <!-- 配置数据源 -->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
      <property name="driverClassName" value="${jdbc.driver}" />
         <property name="url" value="${jdbc.url}" />
         <property name="username" value="${jdbc.username}" />
         <property name="password" value="${jdbc.password}" />
         <!-- 初始化连接大小 -->
         <property name="initialSize" value="${initialSize}" />
         <!-- 连接池最大使用连接数量 -->
         <property name="maxActive" value="${maxActive}" />
         <!-- 连接池最大空闲 -->
         <property name="maxIdle" value="${maxIdle}" />
         <!-- 连接池最小空闲 -->
         <property name="minIdle" value="${minIdle}" />
         <!-- 获取连接最大等待时间 -->
         <property name="maxWait" value="${maxWait}" />
         <property name="validationQuery" value="${validationQuery}" />
         <property name="testOnBorrow" value="false" />
         <property name="testOnReturn" value="false" />
         <property name="testWhileIdle" value="true" />
         <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
         <property name="timeBetweenEvictionRunsMillis" value="60000" />
         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
         <property name="minEvictableIdleTimeMillis" value="25200000" />
         <!-- 打开removeAbandoned功能 -->
         <property name="removeAbandoned" value="true" />
         <!-- 1800秒，也就是30分钟 -->
         <property name="removeAbandonedTimeout" value="1800" />
         <!-- 关闭abanded连接时输出错误日志 -->
         <property name="logAbandoned" value="true" />
         <!-- 监控数据库 -->
         <!-- <property name="filters" value="stat" /> -->
         <property name="filters" value="mergeStat" />
    </bean>
  
  
  
  
  
  
  
    <!-- spring和MyBatis整合配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
     <!-- 指定会话工厂使用的数据源 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 指定mybatis核心配置文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!-- 自动扫描mapping.xml映射文件文件 -->
        <property name="mapperLocations" value="classpath*:com/hyxy/dao/*.xml"></property>
    </bean>
    
    <!-- DAO接口所在包名，Spring会自动查找其下的类,自动为我们注册对应的sqlSessionFactory对象 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.hyxy.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    
    <!-- spring事务管理  -->
    <bean id="transactionManager"   class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 使用annotation开启注解事务,事务支持@Transactional 标记 -->
    <!--在service层的类加上@Transactiona事务注解，表示这个类里所有的方法加入了事务，不加事务时会出错 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    
    <!-- 配置druid监控spring jdbc -->
   <!--作用：Druid是为OLAP工作流的探索性分析而构建，它支持各种过滤、聚合和查询等类；
   Druid的低延迟数据摄取架构允许事件在它们创建后毫秒内可被查询到；
   Druid的数据在系统更新时依然可用，规模的扩大和缩小都不会造成数据丢失；
   Druid已实现每天能够处理数十亿事件和TB级数据; -->
    <bean id="druid-stat-interceptor"
         class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
         scope="prototype">
         <property name="patterns">
             <list>
                 <value>com.user.service.*</value>
             </list>
         </property>
    </bean>
    
    <!-- 配置AOP切面 -->
    <aop:config>
         <aop:advisor advice-ref="druid-stat-interceptor"
             pointcut-ref="druid-stat-pointcut" />
    </aop:config>
    
</beans>