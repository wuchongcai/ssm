#把指定级别及以上的日志信息输出到指定的一个或者多个位置
#Log4j的root配置语法:log4j.rootLogger = 日志级别 , appenderName, appenderName, …
#Log4j根据日志信息的重要程度，分OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL
#Log4j官方建议实际实用的话，Log4j建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG
#日志输出级别：Debug < Info < Warn < Error < Fatal 

#mybatis显示SQL语句日志配置，com.user.dao是mybatis框架中dao接口所在的包名 
#log4j的logger配置语法：log4j.logger.packageName[.ClassName]=level[,appender]
#log4j.logger给包和类指定级别,如果不配置这个，则采用log4j.rootLogger的级别
#指定mybatis框架中com.user.dao接口所在的包打印DEBUG级别日志
#打印显示的sql语句默认为debug级别，所以必须设置为debug级别
log4j.logger.com.hyxy.dao=DEBUG


#root日志定义-----输出级别(debug)和输出平台(console,infoFile,warnFile,errorFile,fatalFile)
#日志输出级别为debug:把debug层级以及以上的级别信息输出到指定的平台;如果设为info,比INFO级别小的debug级别的就不再输出了
log4j.rootLogger=Info,console,infoFile,warnFile,errorFile,fatalFile


#debug调试信息级别日志----控制台打印
#设置console写出器目的地, -- 打印到屏幕
log4j.appender.console=org.apache.log4j.ConsoleAppender 
#输出日志到控制台的方式，默认为System.out
#System.out---输出控制台，System.err-----会当作错误输出，全是红色的
log4j.appender.console.Target=System.out
# org.apache.log4j.PatternLayout:灵活地指定布局模式
log4j.appender.console.layout=org.apache.log4j.PatternLayout 
#上一句设置了PatternLayout灵活指定格式，则要指定打印参数
#显示信息全：2019-04-26 09:02:10,003 [main] DEBUG [com.user.dao.UserDao.SelectUser] - ==>
log4j.appender.console.layout.ConversionPattern=%d %-5p [%c]:%L - %m%n
#显示信息少：2019-04-26 09:07:33,975 DEBUG - <==   sql语句    
#log4j.appender.console.layout.ConversionPattern=%d %-5p - %m%n


#info普通级别日志----输出到文件(每天产生一个文件) 
#修改log4j.rootLogger对infoFile平台指定的的日志级别
log4j.appender.infoFile.Threshold=info
#org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件)
log4j.appender.infoFile=org.apache.log4j.DailyRollingFileAppender
#设置文件输出路径
log4j.appender.infoFile.File=E:/log/info/infoFile.log
#设置每天日志输出文件名
log4j.appender.infoFile.datePattern='.'yyyy-MM-dd'.log'
#org.apache.log4j.PatternLayout:灵活地指定布局模式
log4j.appender.infoFile.layout=org.apache.log4j.PatternLayout
#上一句设置了PatternLayout灵活指定格式，则要指定打印参数
log4j.appender.infoFile.layout.ConversionPattern=%d [%t] %-5p [%c]:%L - %m%n


#Warn警告级别日志----输出到文件(日志会在一个文件中追加) 
#修改log4j.rootLogger对warnFile平台指定的的日志级别
log4j.appender.warnFile.Threshold=WARN
#文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.warnFile=org.apache.log4j.RollingFileAppender
#设置文件输出路径
log4j.appender.warnFile.File=E:/log/warn/warnFile.log
# 指定文件的最大 大小
log4j.appender.warnFile.MaxFileSize=200MB
#可被备份的日志数
log4j.appender.warnFile.MaxBackupIndex=500
#org.apache.log4j.PatternLayout:灵活地指定布局模式
log4j.appender.warnFile.layout=org.apache.log4j.PatternLayout
#上一句设置了PatternLayout灵活指定格式，则要指定打印参数
log4j.appender.warnFile.layout.ConversionPattern=%d [%t] %-5p [%c]:%L - %m%n


#error错误级别日志----输出到文件(日志会在一个文件中追加) 
#修改log4j.rootLogger对errorFile平台指定的的日志级别
log4j.appender.errorFile.Threshold=ERROR
#文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.errorFile=org.apache.log4j.RollingFileAppender
#设置文件输出路径
log4j.appender.errorFile.File=E:/log/error/errorFile.log
# 指定文件的最大 大小
log4j.appender.errorFile.MaxFileSize=200MB
#可被备份的日志数
log4j.appender.errorFile.MaxBackupIndex=500
#org.apache.log4j.PatternLayout:灵活地指定布局模式
log4j.appender.errorFile.layout=org.apache.log4j.PatternLayout
#上一句设置了PatternLayout灵活指定格式，则要指定打印参数
log4j.appender.errorFile.layout.ConversionPattern=%d [%t] %-5p [%c]:%L - %m%n


#fatal严重错误级别日志----输出到文件(日志会在一个文件中追加) 
#修改log4j.rootLogger对fatalFile平台指定的的日志级别
log4j.appender.fatalFile.Threshold=FATAL
#文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.fatalFile=org.apache.log4j.RollingFileAppender
#设置文件输出路径
log4j.appender.fatalFile.File=E:/log/fatal/fatalFile.log
# 指定文件的最大 大小
log4j.appender.fatalFile.MaxFileSize=200MB
#可被备份的日志数
log4j.appender.fatalFile.MaxBackupIndex=500
#org.apache.log4j.PatternLayout:灵活地指定布局模式
log4j.appender.fatalFile.layout=org.apache.log4j.PatternLayout
#上一句设置了PatternLayout灵活指定格式，则要指定打印参数
log4j.appender.fatalFile.layout.ConversionPattern=%d [%t] %-5p [%c]:%L - %m%n
